// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.2.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ModelGenerator.Test
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class GeneratingClassCopyMethodsFeature : Xunit.IClassFixture<GeneratingClassCopyMethodsFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "CopyMethodGenerator.feature"
#line hidden
        
        public GeneratingClassCopyMethodsFeature()
        {
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Generating class copy methods", @"	Clone method should create a new item
	Clone method should copy all existing properties to it except navigation properties
	ToItem method should create a new model item
	ToItem method should copy all existing properties to it except navigation properties", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void SetFixture(GeneratingClassCopyMethodsFeature.FixtureData fixtureData)
        {
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute(DisplayName="A Create view model clone method is created")]
        [Xunit.TraitAttribute("FeatureTitle", "Generating class copy methods")]
        [Xunit.TraitAttribute("Description", "A Create view model clone method is created")]
        public virtual void ACreateViewModelCloneMethodIsCreated()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A Create view model clone method is created", ((string[])(null)));
#line 7
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table1.AddRow(new string[] {
                        "T1"});
#line 8
 testRunner.Given("I have the test class", ((string)(null)), table1, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Type",
                        "IncludeInUpdate",
                        "IncludeInDetail",
                        "IncludeInSummary",
                        "IncludeInCreate",
                        "GenerateAsList",
                        "NavigationPropertyId"});
            table2.AddRow(new string[] {
                        "N1",
                        "T1",
                        "true",
                        "false",
                        "false",
                        "false",
                        "true",
                        ""});
            table2.AddRow(new string[] {
                        "N2",
                        "T2",
                        "true",
                        "false",
                        "false",
                        "false",
                        "false",
                        ""});
            table2.AddRow(new string[] {
                        "N3",
                        "T3",
                        "false",
                        "true",
                        "false",
                        "false",
                        "true",
                        ""});
            table2.AddRow(new string[] {
                        "N4",
                        "T4",
                        "false",
                        "true",
                        "false",
                        "false",
                        "false",
                        ""});
            table2.AddRow(new string[] {
                        "N5",
                        "T5",
                        "false",
                        "false",
                        "true",
                        "false",
                        "true",
                        ""});
            table2.AddRow(new string[] {
                        "N6",
                        "T6",
                        "false",
                        "false",
                        "true",
                        "false",
                        "false",
                        ""});
            table2.AddRow(new string[] {
                        "N7",
                        "T5",
                        "false",
                        "false",
                        "false",
                        "true",
                        "true",
                        ""});
            table2.AddRow(new string[] {
                        "N8",
                        "T6",
                        "false",
                        "false",
                        "false",
                        "true",
                        "false",
                        ""});
            table2.AddRow(new string[] {
                        "N9",
                        "T2",
                        "true",
                        "false",
                        "false",
                        "false",
                        "false",
                        "P1"});
            table2.AddRow(new string[] {
                        "N10",
                        "T4",
                        "false",
                        "true",
                        "false",
                        "false",
                        "false",
                        "P2"});
            table2.AddRow(new string[] {
                        "N11",
                        "T6",
                        "false",
                        "false",
                        "true",
                        "false",
                        "false",
                        "P3"});
            table2.AddRow(new string[] {
                        "N12",
                        "T6",
                        "false",
                        "false",
                        "false",
                        "true",
                        "false",
                        "P4"});
#line 11
 testRunner.And("it has the properties", ((string)(null)), table2, "And ");
#line 25
 testRunner.And("the function generator is in Create mode", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 26
 testRunner.When("I generate a clone method", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 27
 testRunner.Then("there should be a public function object Clone()", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 28
 testRunner.And("it should assign properties N8 to item", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 29
 testRunner.And("it should not assign properties N1,N2,N3,N4,N5,N6,N7,N9,N10,N11,N12 to item", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="A Model clone method is created")]
        [Xunit.TraitAttribute("FeatureTitle", "Generating class copy methods")]
        [Xunit.TraitAttribute("Description", "A Model clone method is created")]
        public virtual void AModelCloneMethodIsCreated()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A Model clone method is created", ((string[])(null)));
#line 31
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table3.AddRow(new string[] {
                        "T1"});
#line 32
 testRunner.Given("I have the test class", ((string)(null)), table3, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Type",
                        "IncludeInUpdate",
                        "IncludeInDetail",
                        "IncludeInSummary",
                        "IncludeInCreate",
                        "GenerateAsList",
                        "NavigationPropertyId"});
            table4.AddRow(new string[] {
                        "N1",
                        "T1",
                        "true",
                        "false",
                        "false",
                        "false",
                        "true",
                        ""});
            table4.AddRow(new string[] {
                        "N2",
                        "T2",
                        "true",
                        "false",
                        "false",
                        "false",
                        "false",
                        ""});
            table4.AddRow(new string[] {
                        "N3",
                        "T3",
                        "false",
                        "true",
                        "false",
                        "false",
                        "true",
                        ""});
            table4.AddRow(new string[] {
                        "N4",
                        "T4",
                        "false",
                        "true",
                        "false",
                        "false",
                        "false",
                        ""});
            table4.AddRow(new string[] {
                        "N5",
                        "T5",
                        "false",
                        "false",
                        "true",
                        "false",
                        "true",
                        ""});
            table4.AddRow(new string[] {
                        "N6",
                        "T6",
                        "false",
                        "false",
                        "true",
                        "false",
                        "false",
                        ""});
            table4.AddRow(new string[] {
                        "N7",
                        "T5",
                        "false",
                        "false",
                        "false",
                        "true",
                        "true",
                        ""});
            table4.AddRow(new string[] {
                        "N8",
                        "T6",
                        "false",
                        "false",
                        "false",
                        "true",
                        "false",
                        ""});
            table4.AddRow(new string[] {
                        "N9",
                        "T2",
                        "true",
                        "false",
                        "false",
                        "false",
                        "false",
                        "P1"});
            table4.AddRow(new string[] {
                        "N10",
                        "T4",
                        "false",
                        "true",
                        "false",
                        "false",
                        "false",
                        "P2"});
            table4.AddRow(new string[] {
                        "N11",
                        "T6",
                        "false",
                        "false",
                        "true",
                        "false",
                        "false",
                        "P3"});
            table4.AddRow(new string[] {
                        "N12",
                        "T6",
                        "false",
                        "false",
                        "false",
                        "true",
                        "false",
                        "P4"});
#line 35
 testRunner.And("it has the properties", ((string)(null)), table4, "And ");
#line 49
 testRunner.And("the function generator is in Model mode", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 50
 testRunner.When("I generate a clone method", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 51
 testRunner.Then("there should be a public function object Clone()", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 52
 testRunner.And("it should assign properties N2,N4,N6,N8 to item", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 53
 testRunner.And("it should not assign properties N1,N3,N5,N7,N9,N10,N11,N12 to item", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="A Update view model clone method is created")]
        [Xunit.TraitAttribute("FeatureTitle", "Generating class copy methods")]
        [Xunit.TraitAttribute("Description", "A Update view model clone method is created")]
        public virtual void AUpdateViewModelCloneMethodIsCreated()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A Update view model clone method is created", ((string[])(null)));
#line 55
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table5.AddRow(new string[] {
                        "T1"});
#line 56
 testRunner.Given("I have the test class", ((string)(null)), table5, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Type",
                        "IncludeInUpdate",
                        "IncludeInDetail",
                        "IncludeInSummary",
                        "IncludeInCreate",
                        "GenerateAsList",
                        "NavigationPropertyId"});
            table6.AddRow(new string[] {
                        "N1",
                        "T1",
                        "true",
                        "false",
                        "false",
                        "false",
                        "true",
                        ""});
            table6.AddRow(new string[] {
                        "N2",
                        "T2",
                        "true",
                        "false",
                        "false",
                        "false",
                        "false",
                        ""});
            table6.AddRow(new string[] {
                        "N3",
                        "T3",
                        "false",
                        "true",
                        "false",
                        "false",
                        "true",
                        ""});
            table6.AddRow(new string[] {
                        "N4",
                        "T4",
                        "false",
                        "true",
                        "false",
                        "false",
                        "false",
                        ""});
            table6.AddRow(new string[] {
                        "N5",
                        "T5",
                        "false",
                        "false",
                        "true",
                        "false",
                        "true",
                        ""});
            table6.AddRow(new string[] {
                        "N6",
                        "T6",
                        "false",
                        "false",
                        "true",
                        "false",
                        "false",
                        ""});
            table6.AddRow(new string[] {
                        "N7",
                        "T5",
                        "false",
                        "false",
                        "false",
                        "true",
                        "true",
                        ""});
            table6.AddRow(new string[] {
                        "N8",
                        "T6",
                        "false",
                        "false",
                        "false",
                        "true",
                        "false",
                        ""});
            table6.AddRow(new string[] {
                        "N9",
                        "T2",
                        "true",
                        "false",
                        "false",
                        "false",
                        "false",
                        "P1"});
            table6.AddRow(new string[] {
                        "N10",
                        "T4",
                        "false",
                        "true",
                        "false",
                        "false",
                        "false",
                        "P2"});
            table6.AddRow(new string[] {
                        "N11",
                        "T6",
                        "false",
                        "false",
                        "true",
                        "false",
                        "false",
                        "P3"});
            table6.AddRow(new string[] {
                        "N12",
                        "T6",
                        "false",
                        "false",
                        "false",
                        "true",
                        "false",
                        "P4"});
#line 59
 testRunner.And("it has the properties", ((string)(null)), table6, "And ");
#line 73
 testRunner.And("the function generator is in Update mode", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 74
 testRunner.When("I generate a clone method", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 75
 testRunner.Then("there should be a public function object Clone()", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 76
 testRunner.And("it should assign properties N2 to item", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 77
 testRunner.And("it should not assign properties N1,N3,N4,N5,N6,N7,N8,N9,N10,N11,N12 to item", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="A Details view model clone method is created")]
        [Xunit.TraitAttribute("FeatureTitle", "Generating class copy methods")]
        [Xunit.TraitAttribute("Description", "A Details view model clone method is created")]
        public virtual void ADetailsViewModelCloneMethodIsCreated()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A Details view model clone method is created", ((string[])(null)));
#line 79
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table7.AddRow(new string[] {
                        "T1"});
#line 80
 testRunner.Given("I have the test class", ((string)(null)), table7, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Type",
                        "IncludeInUpdate",
                        "IncludeInDetail",
                        "IncludeInSummary",
                        "IncludeInCreate",
                        "GenerateAsList",
                        "NavigationPropertyId"});
            table8.AddRow(new string[] {
                        "N1",
                        "T1",
                        "true",
                        "false",
                        "false",
                        "false",
                        "true",
                        ""});
            table8.AddRow(new string[] {
                        "N2",
                        "T2",
                        "true",
                        "false",
                        "false",
                        "false",
                        "false",
                        ""});
            table8.AddRow(new string[] {
                        "N3",
                        "T3",
                        "false",
                        "true",
                        "false",
                        "false",
                        "true",
                        ""});
            table8.AddRow(new string[] {
                        "N4",
                        "T4",
                        "false",
                        "true",
                        "false",
                        "false",
                        "false",
                        ""});
            table8.AddRow(new string[] {
                        "N5",
                        "T5",
                        "false",
                        "false",
                        "true",
                        "false",
                        "true",
                        ""});
            table8.AddRow(new string[] {
                        "N6",
                        "T6",
                        "false",
                        "false",
                        "true",
                        "false",
                        "false",
                        ""});
            table8.AddRow(new string[] {
                        "N7",
                        "T5",
                        "false",
                        "false",
                        "false",
                        "true",
                        "true",
                        ""});
            table8.AddRow(new string[] {
                        "N8",
                        "T6",
                        "false",
                        "false",
                        "false",
                        "true",
                        "false",
                        ""});
            table8.AddRow(new string[] {
                        "N9",
                        "T2",
                        "true",
                        "false",
                        "false",
                        "false",
                        "false",
                        "P1"});
            table8.AddRow(new string[] {
                        "N10",
                        "T4",
                        "false",
                        "true",
                        "false",
                        "false",
                        "false",
                        "P2"});
            table8.AddRow(new string[] {
                        "N11",
                        "T6",
                        "false",
                        "false",
                        "true",
                        "false",
                        "false",
                        "P3"});
            table8.AddRow(new string[] {
                        "N12",
                        "T6",
                        "false",
                        "false",
                        "false",
                        "true",
                        "false",
                        "P4"});
#line 83
 testRunner.And("it has the properties", ((string)(null)), table8, "And ");
#line 97
 testRunner.And("the function generator is in Details mode", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 98
 testRunner.When("I generate a clone method", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 99
 testRunner.Then("there should be a public function object Clone()", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 100
 testRunner.And("it should assign properties N4 to item", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 101
 testRunner.And("it should not assign properties N1,N2,N3,N5,N6,N7,N8,N9,N10,N11,N12 to item", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="A Summary view model clone method is created")]
        [Xunit.TraitAttribute("FeatureTitle", "Generating class copy methods")]
        [Xunit.TraitAttribute("Description", "A Summary view model clone method is created")]
        public virtual void ASummaryViewModelCloneMethodIsCreated()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A Summary view model clone method is created", ((string[])(null)));
#line 103
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table9.AddRow(new string[] {
                        "T1"});
#line 104
 testRunner.Given("I have the test class", ((string)(null)), table9, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Type",
                        "IncludeInUpdate",
                        "IncludeInDetail",
                        "IncludeInSummary",
                        "IncludeInCreate",
                        "GenerateAsList",
                        "NavigationPropertyId"});
            table10.AddRow(new string[] {
                        "N1",
                        "T1",
                        "true",
                        "false",
                        "false",
                        "false",
                        "true",
                        ""});
            table10.AddRow(new string[] {
                        "N2",
                        "T2",
                        "true",
                        "false",
                        "false",
                        "false",
                        "false",
                        ""});
            table10.AddRow(new string[] {
                        "N3",
                        "T3",
                        "false",
                        "true",
                        "false",
                        "false",
                        "true",
                        ""});
            table10.AddRow(new string[] {
                        "N4",
                        "T4",
                        "false",
                        "true",
                        "false",
                        "false",
                        "false",
                        ""});
            table10.AddRow(new string[] {
                        "N5",
                        "T5",
                        "false",
                        "false",
                        "true",
                        "false",
                        "true",
                        ""});
            table10.AddRow(new string[] {
                        "N6",
                        "T6",
                        "false",
                        "false",
                        "true",
                        "false",
                        "false",
                        ""});
            table10.AddRow(new string[] {
                        "N7",
                        "T5",
                        "false",
                        "false",
                        "false",
                        "true",
                        "true",
                        ""});
            table10.AddRow(new string[] {
                        "N8",
                        "T6",
                        "false",
                        "false",
                        "false",
                        "true",
                        "false",
                        ""});
            table10.AddRow(new string[] {
                        "N9",
                        "T2",
                        "true",
                        "false",
                        "false",
                        "false",
                        "false",
                        "P1"});
            table10.AddRow(new string[] {
                        "N10",
                        "T4",
                        "false",
                        "true",
                        "false",
                        "false",
                        "false",
                        "P2"});
            table10.AddRow(new string[] {
                        "N11",
                        "T6",
                        "false",
                        "false",
                        "true",
                        "false",
                        "false",
                        "P3"});
            table10.AddRow(new string[] {
                        "N12",
                        "T6",
                        "false",
                        "false",
                        "false",
                        "true",
                        "false",
                        "P4"});
#line 107
 testRunner.And("it has the properties", ((string)(null)), table10, "And ");
#line 121
 testRunner.And("the function generator is in Summary mode", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 122
 testRunner.When("I generate a clone method", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 123
 testRunner.Then("there should be a public function object Clone()", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 124
 testRunner.And("it should assign properties N6 to item", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 125
 testRunner.And("it should not assign properties N1,N2,N3,N4,N5,N7,N8,N9,N10,N11,N12 to item", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="A Create view model ToItem method is created")]
        [Xunit.TraitAttribute("FeatureTitle", "Generating class copy methods")]
        [Xunit.TraitAttribute("Description", "A Create view model ToItem method is created")]
        public virtual void ACreateViewModelToItemMethodIsCreated()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A Create view model ToItem method is created", ((string[])(null)));
#line 127
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table11.AddRow(new string[] {
                        "T1"});
#line 128
 testRunner.Given("I have the test class", ((string)(null)), table11, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Type",
                        "IncludeInUpdate",
                        "IncludeInDetail",
                        "IncludeInSummary",
                        "IncludeInCreate",
                        "GenerateAsList",
                        "NavigationPropertyId"});
            table12.AddRow(new string[] {
                        "N1",
                        "T1",
                        "true",
                        "false",
                        "false",
                        "false",
                        "true",
                        ""});
            table12.AddRow(new string[] {
                        "N2",
                        "T2",
                        "true",
                        "false",
                        "false",
                        "false",
                        "false",
                        ""});
            table12.AddRow(new string[] {
                        "N3",
                        "T3",
                        "false",
                        "true",
                        "false",
                        "false",
                        "true",
                        ""});
            table12.AddRow(new string[] {
                        "N4",
                        "T4",
                        "false",
                        "true",
                        "false",
                        "false",
                        "false",
                        ""});
            table12.AddRow(new string[] {
                        "N5",
                        "T5",
                        "false",
                        "false",
                        "true",
                        "false",
                        "true",
                        ""});
            table12.AddRow(new string[] {
                        "N6",
                        "T6",
                        "false",
                        "false",
                        "true",
                        "false",
                        "false",
                        ""});
            table12.AddRow(new string[] {
                        "N7",
                        "T5",
                        "false",
                        "false",
                        "false",
                        "true",
                        "true",
                        ""});
            table12.AddRow(new string[] {
                        "N8",
                        "T6",
                        "false",
                        "false",
                        "false",
                        "true",
                        "false",
                        ""});
            table12.AddRow(new string[] {
                        "N9",
                        "T2",
                        "true",
                        "false",
                        "false",
                        "false",
                        "false",
                        "P1"});
            table12.AddRow(new string[] {
                        "N10",
                        "T4",
                        "false",
                        "true",
                        "false",
                        "false",
                        "false",
                        "P2"});
            table12.AddRow(new string[] {
                        "N11",
                        "T6",
                        "false",
                        "false",
                        "true",
                        "false",
                        "false",
                        "P3"});
            table12.AddRow(new string[] {
                        "N12",
                        "T6",
                        "false",
                        "false",
                        "false",
                        "true",
                        "false",
                        "P4"});
#line 131
 testRunner.And("it has the properties", ((string)(null)), table12, "And ");
#line 145
 testRunner.And("the function generator is in Create mode", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 146
 testRunner.When("I generate a ToItem method", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 147
 testRunner.Then("there should be a public function T1 ToItem()", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 148
 testRunner.And("it should assign properties N8 to item", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 149
 testRunner.And("it should not assign properties N1,N2,N3,N4,N5,N6,N7,N9,N10,N11,N12 to item", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="A Model ToItem method is created")]
        [Xunit.TraitAttribute("FeatureTitle", "Generating class copy methods")]
        [Xunit.TraitAttribute("Description", "A Model ToItem method is created")]
        public virtual void AModelToItemMethodIsCreated()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A Model ToItem method is created", ((string[])(null)));
#line 151
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table13.AddRow(new string[] {
                        "T1"});
#line 152
 testRunner.Given("I have the test class", ((string)(null)), table13, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Type",
                        "IncludeInUpdate",
                        "IncludeInDetail",
                        "IncludeInSummary",
                        "IncludeInCreate",
                        "GenerateAsList",
                        "NavigationPropertyId"});
            table14.AddRow(new string[] {
                        "N1",
                        "T1",
                        "true",
                        "false",
                        "false",
                        "false",
                        "true",
                        ""});
            table14.AddRow(new string[] {
                        "N2",
                        "T2",
                        "true",
                        "false",
                        "false",
                        "false",
                        "false",
                        ""});
            table14.AddRow(new string[] {
                        "N3",
                        "T3",
                        "false",
                        "true",
                        "false",
                        "false",
                        "true",
                        ""});
            table14.AddRow(new string[] {
                        "N4",
                        "T4",
                        "false",
                        "true",
                        "false",
                        "false",
                        "false",
                        ""});
            table14.AddRow(new string[] {
                        "N5",
                        "T5",
                        "false",
                        "false",
                        "true",
                        "false",
                        "true",
                        ""});
            table14.AddRow(new string[] {
                        "N6",
                        "T6",
                        "false",
                        "false",
                        "true",
                        "false",
                        "false",
                        ""});
            table14.AddRow(new string[] {
                        "N7",
                        "T5",
                        "false",
                        "false",
                        "false",
                        "true",
                        "true",
                        ""});
            table14.AddRow(new string[] {
                        "N8",
                        "T6",
                        "false",
                        "false",
                        "false",
                        "true",
                        "false",
                        ""});
            table14.AddRow(new string[] {
                        "N9",
                        "T2",
                        "true",
                        "false",
                        "false",
                        "false",
                        "false",
                        "P1"});
            table14.AddRow(new string[] {
                        "N10",
                        "T4",
                        "false",
                        "true",
                        "false",
                        "false",
                        "false",
                        "P2"});
            table14.AddRow(new string[] {
                        "N11",
                        "T6",
                        "false",
                        "false",
                        "true",
                        "false",
                        "false",
                        "P3"});
            table14.AddRow(new string[] {
                        "N12",
                        "T6",
                        "false",
                        "false",
                        "false",
                        "true",
                        "false",
                        "P4"});
#line 155
 testRunner.And("it has the properties", ((string)(null)), table14, "And ");
#line 169
 testRunner.And("the function generator is in Model mode", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 170
 testRunner.When("I generate a ToItem method", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 171
 testRunner.Then("there should be no output", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="A Update view model ToItem method is created")]
        [Xunit.TraitAttribute("FeatureTitle", "Generating class copy methods")]
        [Xunit.TraitAttribute("Description", "A Update view model ToItem method is created")]
        public virtual void AUpdateViewModelToItemMethodIsCreated()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A Update view model ToItem method is created", ((string[])(null)));
#line 173
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table15.AddRow(new string[] {
                        "T1"});
#line 174
 testRunner.Given("I have the test class", ((string)(null)), table15, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Type",
                        "IncludeInUpdate",
                        "IncludeInDetail",
                        "IncludeInSummary",
                        "IncludeInCreate",
                        "GenerateAsList",
                        "NavigationPropertyId"});
            table16.AddRow(new string[] {
                        "N1",
                        "T1",
                        "true",
                        "false",
                        "false",
                        "false",
                        "true",
                        ""});
            table16.AddRow(new string[] {
                        "N2",
                        "T2",
                        "true",
                        "false",
                        "false",
                        "false",
                        "false",
                        ""});
            table16.AddRow(new string[] {
                        "N3",
                        "T3",
                        "false",
                        "true",
                        "false",
                        "false",
                        "true",
                        ""});
            table16.AddRow(new string[] {
                        "N4",
                        "T4",
                        "false",
                        "true",
                        "false",
                        "false",
                        "false",
                        ""});
            table16.AddRow(new string[] {
                        "N5",
                        "T5",
                        "false",
                        "false",
                        "true",
                        "false",
                        "true",
                        ""});
            table16.AddRow(new string[] {
                        "N6",
                        "T6",
                        "false",
                        "false",
                        "true",
                        "false",
                        "false",
                        ""});
            table16.AddRow(new string[] {
                        "N7",
                        "T5",
                        "false",
                        "false",
                        "false",
                        "true",
                        "true",
                        ""});
            table16.AddRow(new string[] {
                        "N8",
                        "T6",
                        "false",
                        "false",
                        "false",
                        "true",
                        "false",
                        ""});
            table16.AddRow(new string[] {
                        "N9",
                        "T2",
                        "true",
                        "false",
                        "false",
                        "false",
                        "false",
                        "P1"});
            table16.AddRow(new string[] {
                        "N10",
                        "T4",
                        "false",
                        "true",
                        "false",
                        "false",
                        "false",
                        "P2"});
            table16.AddRow(new string[] {
                        "N11",
                        "T6",
                        "false",
                        "false",
                        "true",
                        "false",
                        "false",
                        "P3"});
            table16.AddRow(new string[] {
                        "N12",
                        "T6",
                        "false",
                        "false",
                        "false",
                        "true",
                        "false",
                        "P4"});
#line 177
 testRunner.And("it has the properties", ((string)(null)), table16, "And ");
#line 191
 testRunner.And("the function generator is in Update mode", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 192
 testRunner.When("I generate a ToItem method", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 193
 testRunner.Then("there should be no output", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="A Details view model ToItem method is created")]
        [Xunit.TraitAttribute("FeatureTitle", "Generating class copy methods")]
        [Xunit.TraitAttribute("Description", "A Details view model ToItem method is created")]
        public virtual void ADetailsViewModelToItemMethodIsCreated()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A Details view model ToItem method is created", ((string[])(null)));
#line 195
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table17.AddRow(new string[] {
                        "T1"});
#line 196
 testRunner.Given("I have the test class", ((string)(null)), table17, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Type",
                        "IncludeInUpdate",
                        "IncludeInDetail",
                        "IncludeInSummary",
                        "IncludeInCreate",
                        "GenerateAsList",
                        "NavigationPropertyId"});
            table18.AddRow(new string[] {
                        "N1",
                        "T1",
                        "true",
                        "false",
                        "false",
                        "false",
                        "true",
                        ""});
            table18.AddRow(new string[] {
                        "N2",
                        "T2",
                        "true",
                        "false",
                        "false",
                        "false",
                        "false",
                        ""});
            table18.AddRow(new string[] {
                        "N3",
                        "T3",
                        "false",
                        "true",
                        "false",
                        "false",
                        "true",
                        ""});
            table18.AddRow(new string[] {
                        "N4",
                        "T4",
                        "false",
                        "true",
                        "false",
                        "false",
                        "false",
                        ""});
            table18.AddRow(new string[] {
                        "N5",
                        "T5",
                        "false",
                        "false",
                        "true",
                        "false",
                        "true",
                        ""});
            table18.AddRow(new string[] {
                        "N6",
                        "T6",
                        "false",
                        "false",
                        "true",
                        "false",
                        "false",
                        ""});
            table18.AddRow(new string[] {
                        "N7",
                        "T5",
                        "false",
                        "false",
                        "false",
                        "true",
                        "true",
                        ""});
            table18.AddRow(new string[] {
                        "N8",
                        "T6",
                        "false",
                        "false",
                        "false",
                        "true",
                        "false",
                        ""});
            table18.AddRow(new string[] {
                        "N9",
                        "T2",
                        "true",
                        "false",
                        "false",
                        "false",
                        "false",
                        "P1"});
            table18.AddRow(new string[] {
                        "N10",
                        "T4",
                        "false",
                        "true",
                        "false",
                        "false",
                        "false",
                        "P2"});
            table18.AddRow(new string[] {
                        "N11",
                        "T6",
                        "false",
                        "false",
                        "true",
                        "false",
                        "false",
                        "P3"});
            table18.AddRow(new string[] {
                        "N12",
                        "T6",
                        "false",
                        "false",
                        "false",
                        "true",
                        "false",
                        "P4"});
#line 199
 testRunner.And("it has the properties", ((string)(null)), table18, "And ");
#line 213
 testRunner.And("the function generator is in Details mode", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 214
 testRunner.When("I generate a ToItem method", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 215
 testRunner.Then("there should be no output", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="A Summary view model ToItem method is created")]
        [Xunit.TraitAttribute("FeatureTitle", "Generating class copy methods")]
        [Xunit.TraitAttribute("Description", "A Summary view model ToItem method is created")]
        public virtual void ASummaryViewModelToItemMethodIsCreated()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A Summary view model ToItem method is created", ((string[])(null)));
#line 217
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table19.AddRow(new string[] {
                        "T1"});
#line 218
 testRunner.Given("I have the test class", ((string)(null)), table19, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Type",
                        "IncludeInUpdate",
                        "IncludeInDetail",
                        "IncludeInSummary",
                        "IncludeInCreate",
                        "GenerateAsList",
                        "NavigationPropertyId"});
            table20.AddRow(new string[] {
                        "N1",
                        "T1",
                        "true",
                        "false",
                        "false",
                        "false",
                        "true",
                        ""});
            table20.AddRow(new string[] {
                        "N2",
                        "T2",
                        "true",
                        "false",
                        "false",
                        "false",
                        "false",
                        ""});
            table20.AddRow(new string[] {
                        "N3",
                        "T3",
                        "false",
                        "true",
                        "false",
                        "false",
                        "true",
                        ""});
            table20.AddRow(new string[] {
                        "N4",
                        "T4",
                        "false",
                        "true",
                        "false",
                        "false",
                        "false",
                        ""});
            table20.AddRow(new string[] {
                        "N5",
                        "T5",
                        "false",
                        "false",
                        "true",
                        "false",
                        "true",
                        ""});
            table20.AddRow(new string[] {
                        "N6",
                        "T6",
                        "false",
                        "false",
                        "true",
                        "false",
                        "false",
                        ""});
            table20.AddRow(new string[] {
                        "N7",
                        "T5",
                        "false",
                        "false",
                        "false",
                        "true",
                        "true",
                        ""});
            table20.AddRow(new string[] {
                        "N8",
                        "T6",
                        "false",
                        "false",
                        "false",
                        "true",
                        "false",
                        ""});
            table20.AddRow(new string[] {
                        "N9",
                        "T2",
                        "true",
                        "false",
                        "false",
                        "false",
                        "false",
                        "P1"});
            table20.AddRow(new string[] {
                        "N10",
                        "T4",
                        "false",
                        "true",
                        "false",
                        "false",
                        "false",
                        "P2"});
            table20.AddRow(new string[] {
                        "N11",
                        "T6",
                        "false",
                        "false",
                        "true",
                        "false",
                        "false",
                        "P3"});
            table20.AddRow(new string[] {
                        "N12",
                        "T6",
                        "false",
                        "false",
                        "false",
                        "true",
                        "false",
                        "P4"});
#line 221
 testRunner.And("it has the properties", ((string)(null)), table20, "And ");
#line 235
 testRunner.And("the function generator is in Summary mode", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 236
 testRunner.When("I generate a ToItem method", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 237
 testRunner.Then("there should be no output", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                GeneratingClassCopyMethodsFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                GeneratingClassCopyMethodsFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
