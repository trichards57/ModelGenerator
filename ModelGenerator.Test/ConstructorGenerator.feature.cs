// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.2.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ModelGenerator.Test
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class GeneratingClassConstructorsFeature : Xunit.IClassFixture<GeneratingClassConstructorsFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "ConstructorGenerator.feature"
#line hidden
        
        public GeneratingClassConstructorsFeature()
        {
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Generating class constructors", "\tConstructor should only be generated if it\'s needed\r\n\tConstructor should only po" +
                    "pulated properties that exist\r\n\tConstructor should provide a default if needed", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void SetFixture(GeneratingClassConstructorsFeature.FixtureData fixtureData)
        {
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute(DisplayName="A Create view model constructor is created")]
        [Xunit.TraitAttribute("FeatureTitle", "Generating class constructors")]
        [Xunit.TraitAttribute("Description", "A Create view model constructor is created")]
        public virtual void ACreateViewModelConstructorIsCreated()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A Create view model constructor is created", ((string[])(null)));
#line 6
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table1.AddRow(new string[] {
                        "T1"});
#line 7
 testRunner.Given("I have the test class", ((string)(null)), table1, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Type",
                        "IncludeInCreate",
                        "GenerateAsList"});
            table2.AddRow(new string[] {
                        "N1",
                        "T1",
                        "true",
                        "true"});
            table2.AddRow(new string[] {
                        "N2",
                        "T2",
                        "true",
                        "false"});
#line 10
 testRunner.And("it has the properties", ((string)(null)), table2, "And ");
#line 14
 testRunner.And("the function generator is in Create mode", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 15
 testRunner.When("I generate a constructor", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 16
 testRunner.Then("there should be no output", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="A Model constructor is created")]
        [Xunit.TraitAttribute("FeatureTitle", "Generating class constructors")]
        [Xunit.TraitAttribute("Description", "A Model constructor is created")]
        public virtual void AModelConstructorIsCreated()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A Model constructor is created", ((string[])(null)));
#line 18
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table3.AddRow(new string[] {
                        "T1"});
#line 19
 testRunner.Given("I have the test class", ((string)(null)), table3, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Type",
                        "IncludeInCreate",
                        "GenerateAsList"});
            table4.AddRow(new string[] {
                        "N1",
                        "T1",
                        "true",
                        "true"});
            table4.AddRow(new string[] {
                        "N2",
                        "T2",
                        "true",
                        "false"});
#line 22
 testRunner.And("it has the properties", ((string)(null)), table4, "And ");
#line 26
 testRunner.And("the function generator is in Model mode", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 27
 testRunner.When("I generate a constructor", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 28
 testRunner.Then("there should be no output", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="A Update view model constructor is created")]
        [Xunit.TraitAttribute("FeatureTitle", "Generating class constructors")]
        [Xunit.TraitAttribute("Description", "A Update view model constructor is created")]
        public virtual void AUpdateViewModelConstructorIsCreated()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A Update view model constructor is created", ((string[])(null)));
#line 30
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table5.AddRow(new string[] {
                        "T1"});
#line 31
 testRunner.Given("I have the test class", ((string)(null)), table5, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Type",
                        "IncludeInUpdate",
                        "IncludeInDetail",
                        "IncludeInSummary",
                        "GenerateAsList"});
            table6.AddRow(new string[] {
                        "N1",
                        "T1",
                        "true",
                        "false",
                        "false",
                        "true"});
            table6.AddRow(new string[] {
                        "N2",
                        "T2",
                        "true",
                        "false",
                        "false",
                        "false"});
            table6.AddRow(new string[] {
                        "N3",
                        "T3",
                        "false",
                        "true",
                        "false",
                        "true"});
            table6.AddRow(new string[] {
                        "N4",
                        "T4",
                        "false",
                        "true",
                        "false",
                        "false"});
            table6.AddRow(new string[] {
                        "N5",
                        "T5",
                        "false",
                        "false",
                        "true",
                        "true"});
            table6.AddRow(new string[] {
                        "N6",
                        "T6",
                        "false",
                        "false",
                        "true",
                        "false"});
#line 34
 testRunner.And("it has the properties", ((string)(null)), table6, "And ");
#line 42
 testRunner.And("the function generator is in Update mode", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 43
 testRunner.When("I generate a constructor", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 44
 testRunner.Then("there should be an empty public function T1Update()", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 45
 testRunner.And("there should be a public function T1Update(T1 item)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 46
 testRunner.And("it should assign properties N1,N2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 47
 testRunner.And("it should not assign properties N3,N4,N5,N6", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="A Details view model constructor is created")]
        [Xunit.TraitAttribute("FeatureTitle", "Generating class constructors")]
        [Xunit.TraitAttribute("Description", "A Details view model constructor is created")]
        public virtual void ADetailsViewModelConstructorIsCreated()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A Details view model constructor is created", ((string[])(null)));
#line 49
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table7.AddRow(new string[] {
                        "T1"});
#line 50
 testRunner.Given("I have the test class", ((string)(null)), table7, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Type",
                        "IncludeInUpdate",
                        "IncludeInDetail",
                        "IncludeInSummary",
                        "GenerateAsList"});
            table8.AddRow(new string[] {
                        "N1",
                        "T1",
                        "true",
                        "false",
                        "false",
                        "true"});
            table8.AddRow(new string[] {
                        "N2",
                        "T2",
                        "true",
                        "false",
                        "false",
                        "false"});
            table8.AddRow(new string[] {
                        "N3",
                        "T3",
                        "false",
                        "true",
                        "false",
                        "true"});
            table8.AddRow(new string[] {
                        "N4",
                        "T4",
                        "false",
                        "true",
                        "false",
                        "false"});
            table8.AddRow(new string[] {
                        "N5",
                        "T5",
                        "false",
                        "false",
                        "true",
                        "true"});
            table8.AddRow(new string[] {
                        "N6",
                        "T6",
                        "false",
                        "false",
                        "true",
                        "false"});
#line 53
 testRunner.And("it has the properties", ((string)(null)), table8, "And ");
#line 61
 testRunner.And("the function generator is in Details mode", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 62
 testRunner.When("I generate a constructor", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 63
 testRunner.Then("there should not be an empty public function T1Details()", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 64
 testRunner.And("there should be a public function T1Details(T1 item)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 65
 testRunner.And("it should assign properties N3,N4", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 66
 testRunner.And("it should not assign properties N1,N2,N5,N6", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="A Summary view model constructor is created")]
        [Xunit.TraitAttribute("FeatureTitle", "Generating class constructors")]
        [Xunit.TraitAttribute("Description", "A Summary view model constructor is created")]
        public virtual void ASummaryViewModelConstructorIsCreated()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A Summary view model constructor is created", ((string[])(null)));
#line 68
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table9.AddRow(new string[] {
                        "T1"});
#line 69
 testRunner.Given("I have the test class", ((string)(null)), table9, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Type",
                        "IncludeInUpdate",
                        "IncludeInDetail",
                        "IncludeInSummary",
                        "GenerateAsList"});
            table10.AddRow(new string[] {
                        "N1",
                        "T1",
                        "true",
                        "false",
                        "false",
                        "true"});
            table10.AddRow(new string[] {
                        "N2",
                        "T2",
                        "true",
                        "false",
                        "false",
                        "false"});
            table10.AddRow(new string[] {
                        "N3",
                        "T3",
                        "false",
                        "true",
                        "false",
                        "true"});
            table10.AddRow(new string[] {
                        "N4",
                        "T4",
                        "false",
                        "true",
                        "false",
                        "false"});
            table10.AddRow(new string[] {
                        "N5",
                        "T5",
                        "false",
                        "false",
                        "true",
                        "true"});
            table10.AddRow(new string[] {
                        "N6",
                        "T6",
                        "false",
                        "false",
                        "true",
                        "false"});
#line 72
 testRunner.And("it has the properties", ((string)(null)), table10, "And ");
#line 80
 testRunner.And("the function generator is in Summary mode", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 81
 testRunner.When("I generate a constructor", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 82
 testRunner.Then("there should not be an empty public function T1Summary()", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 83
 testRunner.And("there should be a public function T1Summary(T1 item)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 84
 testRunner.And("it should assign properties N5,N6", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 85
 testRunner.And("it should not assign properties N1,N2,N3,N4", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                GeneratingClassConstructorsFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                GeneratingClassConstructorsFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
