// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.2.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ModelGenerator.Test
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class GeneratePropertyFeature : Xunit.IClassFixture<GeneratePropertyFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "PropertyGenerator.feature"
#line hidden
        
        public GeneratePropertyFeature()
        {
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Generate Property", "\tA property should be based on the specification in the provided file", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void SetFixture(GeneratePropertyFeature.FixtureData fixtureData)
        {
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.TheoryAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Generate Property")]
        [Xunit.TraitAttribute("Description", "A basic property is generated")]
        [Xunit.InlineDataAttribute("Create", new string[0])]
        [Xunit.InlineDataAttribute("Details", new string[0])]
        [Xunit.InlineDataAttribute("Model", new string[0])]
        [Xunit.InlineDataAttribute("Summary", new string[0])]
        [Xunit.InlineDataAttribute("Update", new string[0])]
        public virtual void ABasicPropertyIsGenerated(string mode, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A basic property is generated", exampleTags);
#line 4
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Type"});
            table1.AddRow(new string[] {
                        "N1",
                        "T1"});
#line 5
 testRunner.Given("there is a single property", ((string)(null)), table1, "Given ");
#line 8
 testRunner.And(string.Format("the property generator is in {0} mode", mode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 9
 testRunner.When("you create a single property", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 10
 testRunner.Then("the output should be a basic property", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="A model string property is generated")]
        [Xunit.TraitAttribute("FeatureTitle", "Generate Property")]
        [Xunit.TraitAttribute("Description", "A model string property is generated")]
        public virtual void AModelStringPropertyIsGenerated()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A model string property is generated", ((string[])(null)));
#line 20
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Type"});
            table2.AddRow(new string[] {
                        "N1",
                        "string"});
#line 21
 testRunner.Given("there is a single property", ((string)(null)), table2, "Given ");
#line 24
 testRunner.And("the property generator is in Model mode", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 25
 testRunner.When("you create a single property", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 26
 testRunner.Then("the output should be a basic property", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 27
 testRunner.And("the property should be initialised with an empty string", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.TheoryAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Generate Property")]
        [Xunit.TraitAttribute("Description", "A view model string property is generated")]
        [Xunit.InlineDataAttribute("Create", new string[0])]
        [Xunit.InlineDataAttribute("Details", new string[0])]
        [Xunit.InlineDataAttribute("Summary", new string[0])]
        [Xunit.InlineDataAttribute("Update", new string[0])]
        public virtual void AViewModelStringPropertyIsGenerated(string mode, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A view model string property is generated", exampleTags);
#line 29
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Type"});
            table3.AddRow(new string[] {
                        "N1",
                        "string"});
#line 30
 testRunner.Given("there is a single property", ((string)(null)), table3, "Given ");
#line 33
 testRunner.And(string.Format("the property generator is in {0} mode", mode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 34
 testRunner.When("you create a single property", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 35
 testRunner.Then("the output should be a basic property", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 36
 testRunner.And("the property should not be initialised", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="A model list property is generated")]
        [Xunit.TraitAttribute("FeatureTitle", "Generate Property")]
        [Xunit.TraitAttribute("Description", "A model list property is generated")]
        public virtual void AModelListPropertyIsGenerated()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A model list property is generated", ((string[])(null)));
#line 45
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Type",
                        "GenerateAsList"});
            table4.AddRow(new string[] {
                        "N1",
                        "T1",
                        "true"});
#line 46
 testRunner.Given("there is a single property", ((string)(null)), table4, "Given ");
#line 49
 testRunner.And("the property generator is in Model mode", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 50
 testRunner.When("you create a single property", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 51
 testRunner.Then("the output should be a collection property", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 52
 testRunner.And("the property should be initialised with a hashset", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.TheoryAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Generate Property")]
        [Xunit.TraitAttribute("Description", "A view model list property is generated")]
        [Xunit.InlineDataAttribute("Create", new string[0])]
        [Xunit.InlineDataAttribute("Details", new string[0])]
        [Xunit.InlineDataAttribute("Summary", new string[0])]
        [Xunit.InlineDataAttribute("Update", new string[0])]
        public virtual void AViewModelListPropertyIsGenerated(string mode, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A view model list property is generated", exampleTags);
#line 54
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Type",
                        "GenerateAsList"});
            table5.AddRow(new string[] {
                        "N1",
                        "T1",
                        "true"});
#line 55
 testRunner.Given("there is a single property", ((string)(null)), table5, "Given ");
#line 58
 testRunner.And(string.Format("the property generator is in {0} mode", mode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 59
 testRunner.When("you create a single property", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 60
 testRunner.Then(string.Format("the output should be an enumerable {0} property", mode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 61
 testRunner.And("the property should not be initialised", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="A model property is marked with a navigation property id")]
        [Xunit.TraitAttribute("FeatureTitle", "Generate Property")]
        [Xunit.TraitAttribute("Description", "A model property is marked with a navigation property id")]
        public virtual void AModelPropertyIsMarkedWithANavigationPropertyId()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A model property is marked with a navigation property id", ((string[])(null)));
#line 70
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Type",
                        "NavigationPropertyId"});
            table6.AddRow(new string[] {
                        "N1",
                        "T1",
                        "PropId"});
#line 71
 testRunner.Given("there is a single property", ((string)(null)), table6, "Given ");
#line 74
 testRunner.And("the property generator is in Model mode", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 75
 testRunner.When("you create a single property", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 76
 testRunner.Then("the output should be a basic property", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 77
 testRunner.And("the output should have a ForeignKey(\"PropId\") attribute", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.TheoryAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Generate Property")]
        [Xunit.TraitAttribute("Description", "A view model property is marked with a navigation property id")]
        [Xunit.InlineDataAttribute("Create", new string[0])]
        [Xunit.InlineDataAttribute("Details", new string[0])]
        [Xunit.InlineDataAttribute("Summary", new string[0])]
        [Xunit.InlineDataAttribute("Update", new string[0])]
        public virtual void AViewModelPropertyIsMarkedWithANavigationPropertyId(string mode, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A view model property is marked with a navigation property id", exampleTags);
#line 79
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Type",
                        "NavigationPropertyId"});
            table7.AddRow(new string[] {
                        "N1",
                        "T1",
                        "PropId"});
#line 80
 testRunner.Given("there is a single property", ((string)(null)), table7, "Given ");
#line 83
 testRunner.And(string.Format("the property generator is in {0} mode", mode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 84
 testRunner.When("you create a single property", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 85
 testRunner.Then("the output should be a basic property", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 86
 testRunner.And("the output should not have a ForeignKey attribute", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="A model property is marked with a display name")]
        [Xunit.TraitAttribute("FeatureTitle", "Generate Property")]
        [Xunit.TraitAttribute("Description", "A model property is marked with a display name")]
        public virtual void AModelPropertyIsMarkedWithADisplayName()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A model property is marked with a display name", ((string[])(null)));
#line 95
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Type",
                        "DisplayName"});
            table8.AddRow(new string[] {
                        "N1",
                        "T1",
                        "Display"});
#line 96
 testRunner.Given("there is a single property", ((string)(null)), table8, "Given ");
#line 99
 testRunner.And("the property generator is in Model mode", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 100
 testRunner.When("you create a single property", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 101
 testRunner.Then("the output should be a basic property", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 102
 testRunner.And("the output should not have a DisplayName attribute", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.TheoryAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Generate Property")]
        [Xunit.TraitAttribute("Description", "A view model property is marked with a display name")]
        [Xunit.InlineDataAttribute("Create", new string[0])]
        [Xunit.InlineDataAttribute("Details", new string[0])]
        [Xunit.InlineDataAttribute("Summary", new string[0])]
        [Xunit.InlineDataAttribute("Update", new string[0])]
        public virtual void AViewModelPropertyIsMarkedWithADisplayName(string mode, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A view model property is marked with a display name", exampleTags);
#line 104
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Type",
                        "DisplayName"});
            table9.AddRow(new string[] {
                        "N1",
                        "T1",
                        "Display"});
#line 105
 testRunner.Given("there is a single property", ((string)(null)), table9, "Given ");
#line 108
 testRunner.And(string.Format("the property generator is in {0} mode", mode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 109
 testRunner.When("you create a single property", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 110
 testRunner.Then("the output should be a basic property", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 111
 testRunner.And("the output should have a Display(Name=\"Display\") attribute", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.TheoryAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Generate Property")]
        [Xunit.TraitAttribute("Description", "A model or read-only view model property is marked as an email address")]
        [Xunit.InlineDataAttribute("Model", new string[0])]
        [Xunit.InlineDataAttribute("Details", new string[0])]
        [Xunit.InlineDataAttribute("Summary", new string[0])]
        public virtual void AModelOrRead_OnlyViewModelPropertyIsMarkedAsAnEmailAddress(string mode, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A model or read-only view model property is marked as an email address", exampleTags);
#line 120
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Type",
                        "ValidateAsEmail"});
            table10.AddRow(new string[] {
                        "N1",
                        "T1",
                        "true"});
#line 121
 testRunner.Given("there is a single property", ((string)(null)), table10, "Given ");
#line 124
 testRunner.And(string.Format("the property generator is in {0} mode", mode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 125
 testRunner.When("you create a single property", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 126
 testRunner.Then("the output should be a basic property", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 127
 testRunner.And("the output should not have a EmailAddress attribute", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.TheoryAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Generate Property")]
        [Xunit.TraitAttribute("Description", "A view model property as an email address")]
        [Xunit.InlineDataAttribute("Create", new string[0])]
        [Xunit.InlineDataAttribute("Update", new string[0])]
        public virtual void AViewModelPropertyAsAnEmailAddress(string mode, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A view model property as an email address", exampleTags);
#line 135
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Type",
                        "ValidateAsEmail"});
            table11.AddRow(new string[] {
                        "N1",
                        "T1",
                        "true"});
#line 136
 testRunner.Given("there is a single property", ((string)(null)), table11, "Given ");
#line 139
 testRunner.And(string.Format("the property generator is in {0} mode", mode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 140
 testRunner.When("you create a single property", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 141
 testRunner.Then("the output should be a basic property", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 142
 testRunner.And("the output should have a EmailAddress attribute", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.TheoryAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Generate Property")]
        [Xunit.TraitAttribute("Description", "A model or read-only view model property is marked with a regular expression")]
        [Xunit.InlineDataAttribute("Model", new string[0])]
        [Xunit.InlineDataAttribute("Details", new string[0])]
        [Xunit.InlineDataAttribute("Summary", new string[0])]
        public virtual void AModelOrRead_OnlyViewModelPropertyIsMarkedWithARegularExpression(string mode, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A model or read-only view model property is marked with a regular expression", exampleTags);
#line 149
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Type",
                        "RegularExpression"});
            table12.AddRow(new string[] {
                        "N1",
                        "T1",
                        "RegExp"});
#line 150
 testRunner.Given("there is a single property", ((string)(null)), table12, "Given ");
#line 153
 testRunner.And(string.Format("the property generator is in {0} mode", mode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 154
 testRunner.When("you create a single property", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 155
 testRunner.Then("the output should be a basic property", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 156
 testRunner.And("the output should not have a RegularExpression attribute", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.TheoryAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Generate Property")]
        [Xunit.TraitAttribute("Description", "A view model property is marked with a regular expression")]
        [Xunit.InlineDataAttribute("Create", new string[0])]
        [Xunit.InlineDataAttribute("Update", new string[0])]
        public virtual void AViewModelPropertyIsMarkedWithARegularExpression(string mode, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A view model property is marked with a regular expression", exampleTags);
#line 164
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Type",
                        "RegularExpression"});
            table13.AddRow(new string[] {
                        "N1",
                        "T1",
                        "RegExp"});
#line 165
 testRunner.Given("there is a single property", ((string)(null)), table13, "Given ");
#line 168
 testRunner.And(string.Format("the property generator is in {0} mode", mode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 169
 testRunner.When("you create a single property", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 170
 testRunner.Then("the output should be a basic property", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 171
 testRunner.And("the output should have a RegularExpression(@\"RegExp\") attribute", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.TheoryAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Generate Property")]
        [Xunit.TraitAttribute("Description", "A read-only model property is marked as required")]
        [Xunit.InlineDataAttribute("Details", new string[0])]
        [Xunit.InlineDataAttribute("Summary", new string[0])]
        public virtual void ARead_OnlyModelPropertyIsMarkedAsRequired(string mode, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A read-only model property is marked as required", exampleTags);
#line 178
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Type",
                        "PropertyRequired"});
            table14.AddRow(new string[] {
                        "N1",
                        "T1",
                        "true"});
#line 179
 testRunner.Given("there is a single property", ((string)(null)), table14, "Given ");
#line 182
 testRunner.And(string.Format("the property generator is in {0} mode", mode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 183
 testRunner.When("you create a single property", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 184
 testRunner.Then("the output should be a basic property", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 185
 testRunner.And("the output should not have a Required attribute", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.TheoryAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Generate Property")]
        [Xunit.TraitAttribute("Description", "A writeable model property is marked as required")]
        [Xunit.InlineDataAttribute("Model", new string[0])]
        [Xunit.InlineDataAttribute("Create", new string[0])]
        [Xunit.InlineDataAttribute("Update", new string[0])]
        public virtual void AWriteableModelPropertyIsMarkedAsRequired(string mode, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A writeable model property is marked as required", exampleTags);
#line 192
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Type",
                        "PropertyRequired"});
            table15.AddRow(new string[] {
                        "N1",
                        "T1",
                        "true"});
#line 193
 testRunner.Given("there is a single property", ((string)(null)), table15, "Given ");
#line 196
 testRunner.And(string.Format("the property generator is in {0} mode", mode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 197
 testRunner.When("you create a single property", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 198
 testRunner.Then("the output should be a basic property", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 199
 testRunner.And("the output should have a Required attribute", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                GeneratePropertyFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                GeneratePropertyFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
